{"version":3,"sources":["features/cameraSlice.js","WebcamCapture.js","firebase.js","features/appSlice.js","Preview.js","Chat.js","Chats.js","ChatView.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cameraSlice","createSlice","name","initialState","cameraImage","reducers","setCameraImage","state","action","payload","resetCameraImage","actions","selectCameraImage","camera","videoConstraints","width","height","facingMode","WebcamCapture","webcamRef","useRef","dispatch","useDispatch","history","useHistory","capture","useCallback","imageSrc","current","getScreenshot","push","className","audio","ref","screenshotFormat","onClick","fontSize","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","provider","GoogleAuthProvider","appSlice","user","selectedImage","login","logout","selectImage","resetImage","selectUser","app","selectSelectedImage","Preview","useSelector","useEffect","replace","src","alt","id","uuid","putString","on","error","console","log","child","getDownloadURL","then","url","collection","add","imageUrl","username","read","profilePic","timestamp","FieldValue","serverTimestamp","Chat","array","e","a","filter","i","doc","delete","preventDefault","catch","err","alert","set","merge","Avatar","date","Date","toDate","toUTCString","deleteChat","Chats","useState","posts","setPosts","orderBy","onSnapshot","snapshot","docs","map","data","signOut","placeholder","type","View","exit","isPlaying","duration","strokeWidth","size","colors","remainingTime","Login","Button","variant","signInWithPopup","result","displayName","photoURL","uid","message","App","onAuthStateChanged","authUser","path","exact","store","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAEaA,EAAcC,YAAY,CACrCC,KAAM,SACNC,aAAc,CACZC,YAAa,MAGfC,SAAU,CACRC,eAAgB,SAACC,EAAOC,GACtBD,EAAMH,YAAcI,EAAOC,SAE7BC,iBAAkB,SAACH,GACfA,EAAMH,YAAc,S,EAKwBJ,EAAYW,QAAjDL,E,EAAAA,eAAgBI,E,EAAAA,iBAElBE,EAAoB,SAACL,GAAD,OAAWA,EAAMM,OAAOT,aAE1CJ,IAAf,Q,sBCbMc,EAAmB,CACrBC,MAAO,IACPC,OAAQ,IACRC,WAAY,QAoDDC,MAjDf,WAGI,IAAMC,EAAYC,iBAAO,MAGnBC,EAAWC,cAIXC,EAAUC,cAOVC,EAAUC,uBAAa,WACzB,IAAMC,EAAWR,EAAUS,QAAQC,gBACnCR,EAASf,EAAeqB,IACxBJ,EAAQO,KAAK,cACd,CAACX,IAMJ,OACI,sBAAKY,UAAU,gBAAf,UACI,cAAC,IAAD,CACIC,OAAO,EACPhB,OAAQF,EAAiBE,OACzBiB,IAAMd,EACNe,iBAAiB,aACjBnB,MAAOD,EAAiBC,MACxBD,iBAAkBA,IAGtB,cAAC,IAAD,CACIiB,UAAU,wBACVI,QAASV,EACTW,SAAS,c,0LC3CjBC,EADcC,IAASC,cAVR,CACnBC,OAAQ,0CACRC,WAAY,+CACZC,UAAW,+BACXC,cAAe,2CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIMC,YACjBC,EAAOV,IAASU,OAChBC,EAAUX,IAASW,UACnBC,EAAW,IAAIZ,IAASU,KAAKG,mBCdxBC,G,MAAWnD,YAAY,CAClCC,KAAM,MACNC,aAAc,CACZkD,KAAM,KACNC,cAAe,MAGjBjD,SAAU,CACRkD,MAAO,SAAChD,EAAOC,GACbD,EAAM8C,KAAO7C,EAAOC,SAEtB+C,OAAQ,SAACjD,GACPA,EAAM8C,KAAO,MAEfI,YAAa,SAAClD,EAAOC,GACnBD,EAAM+C,cAAgB9C,EAAOC,SAE/BiD,WAAY,SAACnD,GACXA,EAAM+C,cAAgB,U,EAK6BF,EAASzC,QAAnD4C,E,EAAAA,MAAOC,E,EAAAA,OAAQC,E,EAAAA,YAEjBE,G,EAF8BD,WAEjB,SAACnD,GAAD,OAAWA,EAAMqD,IAAIP,OAElCQ,GAAsB,SAACtD,GAAD,OAAWA,EAAMqD,IAAIN,eAEzCF,KAAf,QC+DeU,OA1Ef,WAGI,IAAM1D,EAAc2D,YAAYnD,GAC1BW,EAAUC,cACVH,EAAWC,cACX+B,EAAOU,YAAYJ,GA2CzB,OAzCAK,qBAAU,WACD5D,GACDmB,EAAQ0C,QAAQ,OAErB,CAAC7D,EAAamB,IAsCb,sBAAKQ,UAAU,UAAf,UACI,cAAC,IAAD,CAAWI,QArCE,WACjBd,EAASX,MAoC6BqB,UAAU,mBAC5C,sBAAKA,UAAU,wBAAf,UACI,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,OAGJ,qBAAKmC,IAAO9D,EACZ+D,IAAI,KAGJ,sBAAKhC,QAhDI,WAGb,IAAMiC,EAAKC,cACQpB,EAClBhB,IADkB,gBACLmC,IACbE,UAAUlE,EAAa,YAEbmE,GAAG,iBAAkB,MAAM,SAACC,GACnCC,QAAQC,IAAIF,MAEb,WAECvB,EACChB,IAAI,SACJ0C,MAAMP,GACNQ,iBACAC,MAAK,SAACC,GACHzC,EAAG0C,WAAW,SAASC,IAAI,CACvBC,SAAUH,EACVI,SAAU7B,EAAK6B,SACfC,MAAM,EACNC,WAAY/B,EAAK+B,WACjBC,UAAW/C,IAASS,UAAUuC,WAAWC,oBAG7ChE,EAAQ0C,QAAQ,iBAsBIlC,UAAU,kBAAlC,UACI,0CACA,cAAC,IAAD,CAAUK,SAAS,QAAQL,UAAU,6B,qKCxBtCyD,OAnDf,YAAuE,IAAvDJ,EAAsD,EAAtDA,WAAYF,EAA0C,EAA1CA,SAAUG,EAAgC,EAAhCA,UAAWJ,EAAqB,EAArBA,SAAUE,EAAW,EAAXA,KAAMf,EAAK,EAALA,GAEvD/C,EAAWC,cACXC,EAAUC,cACZiE,EAAQ,GAJsD,8CAoBlE,WAA0BC,GAA1B,UAAAC,EAAA,6DACIF,EAAQA,EAAMG,QAAO,SAAAC,GAAC,OAAIA,EAAEzB,KAAOA,KADvC,SAGU/B,EAAG0C,WAAW,SACnBe,IAAI1B,GACJ2B,SACAlB,MAAK,WACFa,EAAEM,oBAEHC,OAAM,SAAAC,GAAG,OAAIC,MAAMD,MAT1B,4CApBkE,sBAgClE,OACI,sBAAK/D,QA3BI,WACJgD,IACD9D,EAASoC,EAAYwB,IACrB5C,EAAG0C,WAAW,SAASe,IAAI1B,GAAIgC,IAC3B,CACAjB,MAAM,GAGN,CAACkB,OAAO,IAEd9E,EAAQO,KAAK,iBAiBKC,UAAU,OAA9B,UACI,cAACuE,GAAA,EAAD,CAAQvE,UAAU,eAAemC,IAAKkB,IACtC,sBAAKrD,UAAU,aAAf,UACI,6BAAKmD,IACL,+BAEMC,GAAQ,gBAAiB,IAC3B,cAAC,KAAD,CAAcoB,KAAQ,IAAIC,KAAJ,OAASnB,QAAT,IAASA,OAAT,EAASA,EAAWoB,UAAUC,uBAK1DvB,GAAQ,cAAC,KAAD,CAAiBpD,UAAU,mBACpCoD,GAAQ,cAAC,KAAD,CAAmBhD,QAAS,SAACuD,IA9CoB,oCA8CfiB,CAAWjB,IAAM3D,UAAU,yBCkBnE6E,OAhEf,WAAkB,IAAD,EACaC,mBAAS,IADtB,oBACNC,EADM,KACCC,EADD,KAEP1D,EAAOU,YAAYJ,GACnBtC,EAAWC,cACXC,EAAUC,cAoBhB,OAlBAwC,qBAAU,WACN3B,EAAG0C,WAAW,SACbiC,QAAQ,YAAa,QAIrBC,YAAW,SAAAC,GAAQ,OAAIH,EAASG,EAASC,KAAKC,KAAI,SAAAtB,GAAG,MAAK,CACvD1B,GAAI0B,EAAI1B,GACRiD,KAAMvB,EAAIuB,iBAEf,IASC,sBAAKtF,UAAU,QAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,cAACuE,GAAA,EAAD,CAAQpC,IAAOb,EAAK+B,WACnBjD,QAAS,kBAAMa,EAAKsE,WACpBvF,UAAU,kBAGX,sBAAKA,UAAU,gBAAf,UACI,cAAC,KAAD,CAAYA,UAAU,sBACtB,uBAAOwF,YAAY,UAAUC,KAAK,YAEtC,cAAC,KAAD,CAAgBzF,UAAU,uBAG9B,qBAAKA,UAAU,eAAf,SAEC+E,EAAMM,KAAI,gBAAEhD,EAAF,EAAEA,GAAF,IAAMiD,KAAOjC,EAAb,EAAaA,WAAYF,EAAzB,EAAyBA,SAAUG,EAAnC,EAAmCA,UAAWJ,EAA9C,EAA8CA,SAAUE,EAAxD,EAAwDA,KAAxD,OACH,cAAC,GAAD,CAEIf,GAAIA,EACJc,SAAUA,EACVG,UAAWA,EACXJ,SAAUA,EACVE,KAAMA,EACNC,WAAYA,GANPhB,QAWjB,cAAC,IAAD,CACIrC,UAAU,qBACVI,QAtCK,WACbd,EAASX,KACTa,EAAQO,KAAK,MAqCLM,SAAS,c,gBCrBVqF,OA1Cf,WACI,IAAMnE,EAAgBS,YAAYF,IAC5BtC,EAAUC,cAEhBwC,qBAAU,WACDV,GACDoE,MAEL,CAACpE,IAEJ,IAAMoE,EAAO,WACTnG,EAAQ0C,QAAQ,WAGpB,OACI,sBAAKlC,UAAU,WAAf,UACI,qBAAKmC,IAAKZ,EAAenB,QAAWuF,EAAMvD,IAAM,KAChD,qBAAKpC,UAAU,kBAAf,SACI,cAAC,wBAAD,CACI4F,WAAS,EACTC,SAAU,GACVC,YAAa,EACbC,KAAM,GACNC,OAAQ,CAEJ,CAAC,UAAW,KACZ,CAAC,UAAW,KACZ,CAAC,UAAW,MATpB,SAYK,YAAsB,IAApBC,EAAmB,EAAnBA,cAIC,OAHsB,IAAlBA,GACAN,IAEGM,W,iBCLhBC,OA7Bf,WAEI,IAAM5G,EAAWC,cAejB,OACI,qBAAKS,UAAU,QAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,qBAAKmC,IAAI,sDACTC,IAAI,KACJ,cAAC+D,GAAA,EAAD,CAAQC,QAAQ,UAAUhG,QAjBvB,WACXa,EACCoF,gBAAgBlF,GAChB2B,MAAK,SAAAwD,GACFhH,EAASkC,EAAM,CACX2B,SAAUmD,EAAOhF,KAAKiF,YACtBlD,WAAYiD,EAAOhF,KAAKkF,SACxBnE,GAAIiE,EAAOhF,KAAKmF,UAErBvC,OAAM,SAAAzB,GAAK,OAAI2B,MAAM3B,EAAMiE,aAQtB,2BCkDDC,OA9Df,WAEE,IAAMrF,EAAOU,YAAYJ,GACnBtC,EAAWC,cAoBjB,OAlBA0C,qBAAU,WAGRhB,EAAK2F,oBAAmB,SAACC,GAErBvH,EADEuH,EACOrF,EAAM,CACb2B,SAAU0D,EAASN,YACnBlD,WAAYwD,EAASL,SACrBnE,GAAIwE,EAASJ,MAGNhF,UAKZ,IAGD,qBAAKzB,UAAU,MAAf,SACA,cAAC,IAAD,UAEIsB,EAGA,qCACA,qBACAtB,UAAU,YACVmC,IAAK,0EACLC,KAAG,IAEH,qBAAKpC,UAAU,YAAf,SACE,qBAAKA,UAAU,sBAAf,SACI,eAAC,IAAD,WACF,cAAC,IAAD,CAAO8G,KAAK,cAAZ,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACI,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,WAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACE,cAAC,EAAD,gBArBR,cAAC,GAAD,SCzCKE,GAAQC,YAAe,CAClCC,QAAS,CACPrF,IAAKsF,GACLrI,OAAQsI,KCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJa,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnF,MAAK,SAACoF,GAClCA,EAAaC,iB","file":"static/js/main.ccb12407.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const cameraSlice = createSlice({\r\n  name: 'camera',\r\n  initialState: {\r\n    cameraImage: null,\r\n  },\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setCameraImage: (state, action) => {\r\n      state.cameraImage = action.payload;\r\n    },\r\n    resetCameraImage: (state) => {\r\n        state.cameraImage = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions;\r\n\r\nexport const selectCameraImage = (state) => state.camera.cameraImage;\r\n\r\nexport default cameraSlice.reducer;\r\n","import React, { useCallback, useRef, useState } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCameraImage } from \"./features/cameraSlice\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"./WebcamCapture.css\";\r\n\r\n\r\nconst videoConstraints = {\r\n    width: 250,\r\n    height: 400,\r\n    facingMode: \"user\",\r\n};\r\n\r\nfunction WebcamCapture() {\r\n\r\n    // Big pointer\r\n    const webcamRef = useRef(null);\r\n\r\n    // It's like a gun \r\n    const dispatch = useDispatch();   \r\n    // It gives me the history of web pages\r\n    // Eg: Imagine when we are on the web page, it \r\n    // gives us the history of the webpage and push the page like a redirect\r\n    const history = useHistory(); \r\n\r\n\r\n    // It will do the function once and save the output\r\n    // of the function so if it gets called again,\r\n    // it knows what to do without the sort of heavyweight\r\n    // of doing the calculation again\r\n    const capture = useCallback (() => {\r\n        const imageSrc = webcamRef.current.getScreenshot();\r\n        dispatch(setCameraImage(imageSrc));\r\n        history.push('/preview')\r\n    }, [webcamRef]) // When does it determine to rerun this function again?\r\n    // It's if the dependency webcamRef changes, then what is will simply do is\r\n    // to tell react to run the function again, it will rerun again. It will be\r\n    // stronger when it is run for the 3rd, 4th, 5th time\r\n\r\n\r\n    return (\r\n        <div className=\"webcamCapture\">\r\n            <Webcam\r\n                audio={false}\r\n                height={videoConstraints.height}\r\n                ref= {webcamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                width={videoConstraints.width}\r\n                videoConstraints={videoConstraints}\r\n            />\r\n\r\n            <RadioButtonUncheckedIcon\r\n                className=\"webcamCapture__button\"\r\n                onClick={capture}\r\n                fontSize=\"large\"\r\n            />\r\n        \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebcamCapture\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAAhJJsfsf1Y_0tVJ48OKvmMSinNc-NIlk\",\r\n    authDomain: \"snapchat-clone-personal-proj.firebaseapp.com\",\r\n    projectId: \"snapchat-clone-personal-proj\",\r\n    storageBucket: \"snapchat-clone-personal-proj.appspot.com\",\r\n    messagingSenderId: \"262094176377\",\r\n    appId: \"1:262094176377:web:9a397cf6157f2b697f94a8\",\r\n    measurementId: \"G-STCBQJJR85\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n  const storage = firebase.storage();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export { db, auth, storage, provider};","import { createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    user: null,\n    selectedImage: null\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n    selectImage: (state, action) => {\n      state.selectedImage = action.payload\n    },\n    resetImage: (state) => {\n      state.selectedImage = null\n    }\n  },\n});\n\nexport const { login, logout, selectImage, resetImage} = appSlice.actions;\n\nexport const selectUser = (state) => state.app.user;\n\nexport const selectSelectedImage = (state) => state.app.selectedImage;\n\nexport default appSlice.reducer;\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router';\r\nimport { resetCameraImage, selectCameraImage } from './features/cameraSlice';\r\nimport \"./Preview.css\"\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport NoteIcon from '@material-ui/icons/Note';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport CropIcon from '@material-ui/icons/Crop';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { db, storage } from './firebase';\r\nimport moment from 'moment';\r\nimport firebase from \"firebase\";\r\nimport { selectUser } from './features/appSlice';\r\n\r\nfunction Preview() {\r\n\r\n    // Pull selectCameraImage from data layer\r\n    const cameraImage = useSelector(selectCameraImage);\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n    const user = useSelector(selectUser);\r\n\r\n    useEffect(() => {\r\n        if (!cameraImage) {\r\n            history.replace('/');\r\n        }\r\n    }, [cameraImage, history])\r\n\r\n    const closePreview = () => {\r\n        dispatch(resetCameraImage());\r\n    }\r\n\r\n    const sendPost = () => {\r\n        // this will generate a random string which is safe \r\n        // which prevents collisions with other ids\r\n        const id = uuid();\r\n        const uploadTask = storage\r\n        .ref(`posts/${id}`)\r\n        .putString(cameraImage, 'data_url')\r\n\r\n        uploadTask.on('state__changed', null, (error) => {\r\n            console.log(error)\r\n\r\n        }, () => {\r\n            // Complete function\r\n            storage\r\n            .ref('posts')\r\n            .child(id)\r\n            .getDownloadURL()\r\n            .then((url) => {\r\n                db.collection(\"posts\").add({\r\n                    imageUrl: url,\r\n                    username: user.username,\r\n                    read: false,\r\n                    profilePic: user.profilePic,\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n                    // timestamp: moment(new Date()).format('h:mm:ss a')\r\n                })\r\n                history.replace('/chats');\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"preview\">\r\n            <CloseIcon onClick={closePreview} className=\"preview__close\"/>\r\n            <div className=\"preview__toolbarRight\">\r\n                <TextFieldsIcon/>\r\n                <CreateIcon/>\r\n                <NoteIcon/>\r\n                <MusicNoteIcon/>\r\n                <AttachFileIcon/>\r\n                <CropIcon/>\r\n                <TimerIcon/>\r\n            </div>\r\n\r\n            <img src = {cameraImage}\r\n            alt=\"\"\r\n            />\r\n\r\n            <div onClick={sendPost} className=\"preview__footer\">\r\n                <h2>Send Now</h2>\r\n                <SendIcon fontSize=\"small\" className=\"preview__sendIcon\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preview\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport \"./Chat.css\"\r\nimport StopRoundedIcon from '@material-ui/icons/StopRounded';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport ReactTimeago from 'react-timeago';\r\nimport { selectCameraImage } from './features/cameraSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport { selectImage } from './features/appSlice';\r\nimport { db } from './firebase';\r\nimport { useHistory } from 'react-router';\r\nimport { FiberSmartRecordRounded } from '@material-ui/icons';\r\n\r\nfunction Chat({ profilePic, username, timestamp, imageUrl, read, id}) {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    let array = [];\r\n\r\n    const open = () => {\r\n        if (!read){\r\n            dispatch(selectImage(imageUrl));\r\n            db.collection(\"posts\").doc(id).set(\r\n                {\r\n                read: true,\r\n                }, \r\n            // If there's no merge, it will overwrite / delete everything in document\r\n                {merge: true}\r\n          );\r\n          history.push('/chats/view')\r\n        }\r\n    }\r\n\r\n    async function deleteChat(e)  {\r\n        array = array.filter(i => i.id !== id);\r\n\r\n        await db.collection(\"posts\")\r\n        .doc(id)\r\n        .delete()\r\n        .then(() => {\r\n            e.preventDefault();\r\n            \r\n        }).catch(err => alert(err));\r\n    }\r\n\r\n    return (\r\n        <div onClick={open} className=\"chat\">\r\n            <Avatar className=\"chat__avatar\" src={profilePic}/>\r\n            <div className=\"chat__info\">\r\n                <h4>{username}</h4>\r\n                <p>\r\n                    {/* If it is not read, render tap to view */}\r\n                    {!read && \"Tap to view -\"}{\" \"}\r\n                    <ReactTimeago date = {new Date(timestamp?.toDate()).toUTCString()} /> \r\n                </p>\r\n            </div>\r\n\r\n            {/* If it is not read, render out stop rounded icon */}\r\n            {!read && <StopRoundedIcon className=\"chat__readIcon\"/>}    \r\n            {read && <DeleteOutlineIcon onClick={(e)=>{deleteChat(e)}}  className=\"chat__deleteIcon\"/> }        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Avatar } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport \"./Chats.css\"\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubble';\r\nimport { auth, db } from './firebase';\r\nimport Chat from './Chat';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectUser } from './features/appSlice';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { useHistory } from 'react-router';\r\nimport { resetCameraImage } from './features/cameraSlice';\r\n\r\nfunction Chats() {\r\n    const [posts, setPosts] = useState([]);\r\n    const user = useSelector(selectUser);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        db.collection(\"posts\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        // Whenever something changes in the db, \r\n        // go ahead and give me the latest db of snapshot\r\n        // So if something is added to the database, it will be updated\r\n        .onSnapshot(snapshot => setPosts(snapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            data: doc.data()\r\n        }))))\r\n    }, [])\r\n\r\n    const takeSnap = () => {\r\n        dispatch(resetCameraImage());\r\n        history.push(\"/\");\r\n\r\n    }\r\n    \r\n    return (\r\n        <div className=\"chats\">\r\n            <div className=\"chats__header\">\r\n                <Avatar src = {user.profilePic}\r\n                 onClick={() => auth.signOut()}\r\n                 className=\"chats__avatar\"\r\n                 />\r\n\r\n                <div className=\"chats__search\">\r\n                    <SearchIcon className=\"chats__searchIcon\" />\r\n                    <input placeholder=\"Friends\" type=\"text\"/>\r\n                </div>\r\n                <ChatBubbleIcon className=\"chats__chatIcon\"/>\r\n            </div>\r\n\r\n            <div className=\"chats__posts\">\r\n\r\n            {posts.map(({id, data: {profilePic, username, timestamp, imageUrl, read}}) => (\r\n                    <Chat\r\n                        key={id}\r\n                        id={id}\r\n                        username={username}\r\n                        timestamp={timestamp}\r\n                        imageUrl={imageUrl}\r\n                        read={read}\r\n                        profilePic={profilePic}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <RadioButtonUncheckedIcon\r\n                className=\"chats__takePicIcon\"\r\n                onClick={takeSnap}\r\n                fontSize=\"large\"\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats\r\n","import React, { useEffect } from 'react'\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router';\r\nimport \"./ChatView.css\"\r\nimport { selectSelectedImage } from './features/appSlice'\r\n\r\nfunction View() {\r\n    const selectedImage = useSelector(selectSelectedImage);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (!selectedImage) {\r\n            exit();\r\n        }\r\n    }, [selectedImage])\r\n\r\n    const exit = () => {\r\n        history.replace(\"/chats\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"chatView\">\r\n            <img src={selectedImage} onClick = {exit} alt = \"\"/>\r\n            <div className=\"chatView__timer\">            \r\n                <CountdownCircleTimer\r\n                    isPlaying\r\n                    duration={10}\r\n                    strokeWidth={6}\r\n                    size={50}\r\n                    colors={[\r\n                        // It will change to that color every 3 seconds\r\n                        [\"#004777\", 0.33],\r\n                        [\"#F7B801\", 0.33],\r\n                        [\"#A30000\", 0.33],\r\n                    ]}\r\n                >\r\n                    {({remainingTime}) => {\r\n                        if (remainingTime === 0) {\r\n                            exit();\r\n                        }\r\n                        return remainingTime;\r\n                    }}\r\n                </CountdownCircleTimer>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default View\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { login } from './features/appSlice';\r\nimport { auth, provider } from './firebase';\r\nimport \"./Login.css\"\r\n\r\nfunction Login() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const signIn = () => {\r\n        auth\r\n        .signInWithPopup(provider)\r\n        .then(result => {\r\n            dispatch(login({\r\n                username: result.user.displayName,\r\n                profilePic: result.user.photoURL,\r\n                id: result.user.uid,\r\n            }))\r\n        }).catch(error => alert(error.message));\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                <img src=\"https://scx2.b-cdn.net/gfx/news/2017/1-snapchat.jpg\"\r\n                alt=\"\"/>\r\n                <Button variant=\"outline\" onClick={signIn}>Sign in</Button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport WebcamCapture from './WebcamCapture';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Preview from './Preview';\nimport Chats from './Chats';\nimport ChatView from './ChatView';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/appSlice';\nimport Login from './Login';\nimport { auth } from './firebase';\n\nfunction App() {\n\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // If any point the authentication state changes, even if i have logged in\n    // before, they have a way of tracking it\n    auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(login({\n          username: authUser.displayName,\n          profilePic: authUser.photoURL,\n          id: authUser.uid,\n        }))\n      } else {\n        dispatch(logout())\n      }\n\n    })\n\n  }, [])\n\n  return (\n    <div className=\"app\">\n    <Router>\n      {/* If user doesn't login, render the login screen */}\n      {!user? (\n        <Login />\n      ): (\n        <>\n        <img \n        className=\"app__logo\"\n        src =\"https://lakeridgenewsonline.com/wp-content/uploads/2020/04/snapchat.jpg\" \n        alt\n         />\n        <div className=\"app__body\">\n          <div className=\"app__bodyBackground\">\n              <Switch>\n            <Route path=\"/chats/view\">\n                <ChatView/>\n              </Route>\n            <Route path=\"/chats\">\n                <Chats/>\n              </Route>\n              <Route path=\"/preview\">\n                <Preview/>\n              </Route>\n              <Route exact path=\"/\">\n                <WebcamCapture/>\n              </Route>\n            </Switch>\n            </div>\n         </div>\n      </>\n      )}\n    </Router>\n        \n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport appReducer from '../features/appSlice';\nimport cameraReducer from '../features/cameraSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n    camera: cameraReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}